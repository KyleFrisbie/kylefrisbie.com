User.create!([
  {first_name: "Kyle", last_name: "Frisbie", email: "kyle.l.frisbie@gmail.com", encrypted_password: "$2a$10$SuwD5rVn7Ws3lBvrYZaMYeb/RKU.JfLMKqdu738rRkbMn./dxaiDy", reset_password_token: nil, reset_password_sent_at: nil, remember_created_at: nil, sign_in_count: 11, current_sign_in_at: "2016-03-13 05:31:51", last_sign_in_at: "2016-03-13 05:29:23", current_sign_in_ip: "127.0.0.1", last_sign_in_ip: "127.0.0.1"}
])
Post.create!([
  {title: "The Development of a Developer", subtitle: "Technology, the future I’d like to be a part of.", image_url: "http://i.imgur.com/3mOm0oq.jpg", date_posted: "2014-02-02", date_modified: "2016-03-11", post_body: "<p>At 24 years of age, there is only a small amount of life experience available to me. What I know is this; I am not where I want to be. Some might call it a quarter life crisis, others a condition of my generation, but I call it the drive to achieve more.</p>    <p>We all are confronted with forks in the road that determine the direction we take our lives. Some forks are unexpected or inevitable, others we are able create. Making the choice to improve a skill, provide for your family, or seek a better future are all actions we can choose which may change the trajectory of our lives. This is what I am attempting to do.</p>    <p>Let me start by telling you a little bit about myself. I am a recent college graduate, my area of study is in Health and Exercise Science. I am happily married, marrying my best friend has been the best decision I’ve ever made. I am currently employed at a hospital where I assemble and sterilize surgical equipment for the OR. The problem: I love computers, not equipment sterilization.</p>    <p>This is where blogging comes in. In the fall of 2013 I began taking computer science classes online at udacity and codeacademy to wet my feet in the realm of programming and software development. As it turns out, I love it! By no means am I a natural, but I’d like to think that the logic behind many programming languages agrees with me. I would like to use this blog as a resource to connect with other individuals seeking to improve their skills relational, professional, and otherwise to keep me accountable to the goals I set and the growth I would like to achieve. Through my development of this blog, I plan on setting goals, and provide updates on projects I’ve undertaken.</p>    <h3> Getting Started: </h3> <p>My first assignment:</p> <ul> <li> <h5>Goal</h5> <ul><li>To develop an understanding of ASP.net so that I might be able to apply these principals to develop my own website using Microsoft Visual Studio.</li> </ul> <li> <h5>Deadline:</h5> <ul><li>Complete review of materials and initial website design: 12 January 2014.</li></ul></li></ul> <p>On a side note, today I began reviewing my ASP.NET materials. My only exposure to date has been with python, HTML5 and CSS, and a sprinkling of Java. The capabilities ASP.NET and Visual Studio have to offer are amazing! Visual Studio is extremely intuitive and has so many helpful tools. That being said, the information I have been exposed to today regarding these things feels a bit over my head, and might require some more marinating.</p>    <p>A big thanks to everyone supporting me, especially my wife, <strong>Alyssa</strong> for letting me pursue my dreams and to <a href=\"http://gentryriggen.com/\"><FONT COLOR=\"aqua\">Gentry</FONT COLOR></a> for mentoring me through this developers journey.</p>    <p>Wish me luck!</p>", user_id: 2, image_thumbnail_url: "http://i.imgur.com/3mOm0oqb.jpg"},
  {title: "Creating Your Own Web API", subtitle: "ASP.NET MVC", image_url: "http://i.imgur.com/YPgfiEm.jpg", date_posted: "2015-09-15", date_modified: "2016-03-11", post_body: "<div>      <h4>Adding Web API to an Existing MVC Project</h4>      <p>As part of increasing my skills across multiple software platforms I am planning on releasing an Android application as a partner to my blog page. This requires me to set up my webpage to respond to API requests (and thus learning an additional technology).        That is one of the great things about side projects, that is, the ability they have to force you to learn new technologies. Now for the good stuff.</p>        <strong>Getting your project ready:</strong>      <p>Visual Studio makes it incredibly simple to add Web API technologies to an existing asp.NET MVC web application. Adding Web API to your project can be done in a couple of different ways:        <ol>          <li>Adding a \"Web API\" controller to your existing project (this is how I did it).</li>          <ul>            <li>This adds a new controller to the specified location. All you have to do is:</li>            <ol>              <li>Right click on the folder where you want your Web API controller to be located (typically your \"Controllers\" folder).</li>              <li>Select \"Add -> Controller\".</li>              <ul>                <li>This brings up a window from which you can select different controller types. In order to import the Web API properties from asp.NET, choose one of the Web API controllers.</li>                <li>For this project I chose \"Web API 2 Controller with actions, using Entity Framework\". What is great about this is that it automatically generates code dependent on a model you already have set in your project, and creates different methods                  for the API to respond to (get, post ...).</li>              </ul>            </ol>          </ul>          <li>            Importing the Web API by adding a Web Api NuGet Package.            <ul>              <li>You can do this by opening your package manager console and searching for/installing the Microsoft.AspNet.WebApi Nuget package.</li>            </ul>          </li>        </ol>        You can make sure that your Web API setup was successful by verifying that a new C# class has been added to your App_Start folder named \"WebApiConfig.cs\".      </p>        <strong>After you've imported Web API:</strong>      <p>        Now that web api is installed in your project it is time to create a controller to respond to API requests. If you used method 1 for adding a Web API (from above) then you have already created a controller to respond to API requests, if not, follow the        instructions in option 1 for adding a new controller.      </p>      <p>        Because I created my controller with Entity Framework actions, it was already modeled and ready to serve responses to the get requests I made for my blog post objects. By default my project served xml objects as the default response to a get request, I wanted        to customize this to return JSON objects instead.      </p>        <strong>Changing the default API response behavior:</strong>      <p>        In order to change the default response to an API request, navigate back to your WebApiConfig.cs file. I changed the default behavior by removing XML as the default response within this class. Observe the code below.      </p>      <strong>Removing XML as the default API response:</strong>      <pre>    var appXmlType = config.Formatters.XmlFormatter.SupportedMediaTypes.FirstOrDefault(t => t.MediaType == \"application/xml\");    config.Formatters.XmlFormatter.SupportedMediaTypes.Remove(appXmlType);  </pre>        <strong>Beautifying our JSON response:</strong>      <p>        Now that JSON is the default response for my Web API, I wanted to make it look good by changing my response object properties to camelCase. I did this by using &lt;JsonMediaTypeFormatter&gt; along with CamelCasePropertyNamesContractResolver.      </p>        <pre>    var jsonFormatter = config.Formatters.OfType&lt;JsonMediaTypeFormatter&gt;().FirstOrDefault();    jsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();  </pre>        <strong>Conclusion:</strong>      <p>Visual Studio makes it easy to add Web API to an existing project thanks to NuGet and code generation. If you need to serve objects from your application don't be afraid to give Web API a shot.</p>        <p>If you're interested in giving my Web API a test run, feel free to make a request by clicking this        <a href=\"http://kylefrisbie.com/api/blogposts/2\"><font color=\"aqua\">LINK</font></a></p>    </div> ", user_id: 2, image_thumbnail_url: "http://i.imgur.com/YPgfiEmb.jpg"},
  {title: "Three Reasons You Need a Professional Mentor", subtitle: "Further Your Career", image_url: "http://i.imgur.com/Rz1RvMi.jpg", date_posted: "2015-08-16", date_modified: "2016-03-11", post_body: "<p>      Software engineering is difficult, and the market is ever changing. To be successful in this profession, it is important to find an individual who can help      you stay the course. Finding a professional mentor does more than further you in your career, it aids in helping you maintain your sanity when the going      gets rough, and point you in the right direction when you aren’t sure what you should be doing.  </p>  <p>      Software engineering practices are always on the mend. Development environments, logical structure, and computer languages are always being improved and      reinvented. Finding the right connections to land you your first gig can be difficult. Having an experienced mentor to help navigate these obstacles will      give you a professional advantage over your peers.  </p>  <p>      <strong>1. They know technologies and the market better than you do:</strong>  </p>  <p>      Being proficient in sought after technologies to help you get a job can be difficult. Software is an ever changing landscape, and the technologies used to      develop modern software are constantly evolving. Want to know where you should be focusing your attention? Having a mentor for reference gives you another      perspective to draw off of. Said mentor can share their experience with what developing has been like in their jobs, how the technology scene has changed,      and what is normal in terms of the amount of effort you should be putting into a single type of technology.  </p>  <p>      <strong>2. They can challenge you to achieve more:</strong>  </p>  <p>      Having more knowledge and exposure, mentors can propel you towards greater success based on their own experiences. They have gone through their own trial      and error process, so they know what has worked for them to become better developers, and then have seen the types of people that have been employed around      them based on their abilities. These are experiences you can draw off of to help focus your attention. Having a list of self-directed goals is excellent,      but having a mentor to oversee your progress and direct you is priceless.  </p>  <p>      <strong>3. They know what you are going through:</strong>  </p>  <p>      Whether you are starting on a path to software engineering as your first ever career, or you are making a career change; having a mentor to talk to can      give you strength when the going gets rough. There are many unique challenges that software engineers are confronted with, and a constant dynamic learning      curve. There might be times you feel like quitting, or don’t have the motivation to work on your side projects. A mentor can push you past these sticking      points, they have experienced many of the same challenges.  </p>  <p>      A mentor isn’t guaranteed to fall into your lap, but always keep a look out. Produce work that you can take pride in, this will catch the attention of      quality mentors. Talk about the projects you are working on and discuss the unique challenges you are being faced with in software engineering circles.      Take an interest in other people’s work and ask questions about technologies you want to know more about. Hopefully this will help narrow the field and      bring quality mentors out of the wood work.  </p> ", user_id: 2, image_thumbnail_url: "http://i.imgur.com/Rz1RvMib.jpg"},
  {title: "Developing My First Android Application", subtitle: "A Simple RGB Color Picker", image_url: "http://i.imgur.com/QzwJ1tO.jpg", date_posted: "2015-08-23", date_modified: "2016-03-11", post_body: "<p>      As an exercise in introducing myself to basic Android development, I created a simple color picking application I call “ColorPicker”. This application takes an input from the user via three “NumberPickers” representing RGB values and displays the resulting      color in an “ImageButton” by changing the color of the background of said image button.    </p>                <p>      Android is based on the MVC structure. MVC stands for “Model-View-Controller” and is an architecture for displaying information to the user. This structure is intuitive because it takes the data from the Model and displays it in a View which the user      can see and interact with. The communication between the View and Model happens through the Controller. The primary interaction in ColorPicker happens between a Java class file (MainActivity.java) and an xml file (activity_main.xml). There are other      interactions going on in addition to these two files which are outside the scope of this post.    </p>                <p>      The main view of the application is defined as the “activity_main”. See below for the activity_main.xml of ColorPicker:    </p>          <title>activity_main.xml</title>  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">  <style type=\"text/css\">  .ln { color: rgb(0,0,0); font-weight: normal; font-style: normal; }  .s0 { color: rgb(232,191,106); }  .s1 { color: rgb(186,186,186); }  .s2 { color: rgb(165,194,97); }  .s3 { color: rgb(169,183,198); }  </style>    <TABLE CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH=\"100%\" BGCOLOR=\"#C0C0C0\" >  <TR><TD><CENTER>  <FONT FACE=\"Arial, Helvetica\" COLOR=\"#000000\">  activity_main.xml</FONT>  </center></TD></TR></TABLE>  <pre>    <span class=\"s0\">&lt;RelativeLayout </span><span class=\"s1\">xmlns:android</span><span class=\"s2\">=&quot;http://schemas.android.com/apk/res/android&quot;</span><span class=\"s0\">                   </span><span class=\"s1\">xmlns:tools</span><span class=\"s2\">=&quot;http://schemas.android.com/tools&quot;</span><span class=\"s0\">                   </span><span class=\"s1\">android:layout_width</span><span class=\"s2\">=&quot;match_parent&quot;</span><span class=\"s0\">                   </span><span class=\"s1\">android:layout_height</span><span class=\"s2\">=&quot;match_parent&quot;</span><span class=\"s0\">                   </span><span class=\"s1\">android:paddingLeft</span><span class=\"s2\">=&quot;@dimen/activity_horizontal_margin&quot;</span><span class=\"s0\">                   </span><span class=\"s1\">android:paddingRight</span><span class=\"s2\">=&quot;@dimen/activity_horizontal_margin&quot;</span><span class=\"s0\">                   </span><span class=\"s1\">android:paddingTop</span><span class=\"s2\">=&quot;@dimen/activity_vertical_margin&quot;</span><span class=\"s0\">                   </span><span class=\"s1\">android:paddingBottom</span><span class=\"s2\">=&quot;@dimen/activity_vertical_margin&quot;</span><span class=\"s0\">                   </span><span class=\"s1\">tools:context</span><span class=\"s2\">=&quot;.MainActivity&quot;</span><span class=\"s0\">&gt;</span><span class=\"s3\">          </span><span class=\"s0\">&lt;NumberPicker               </span><span class=\"s1\">android:layout_width</span><span class=\"s2\">=&quot;wrap_content&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_height</span><span class=\"s2\">=&quot;wrap_content&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:id</span><span class=\"s2\">=&quot;@+id/numberPicker_Red&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_alignParentTop</span><span class=\"s2\">=&quot;true&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_alignParentStart</span><span class=\"s2\">=&quot;true&quot;</span><span class=\"s0\">/&gt;</span><span class=\"s3\">          </span><span class=\"s0\">&lt;NumberPicker               </span><span class=\"s1\">android:layout_width</span><span class=\"s2\">=&quot;wrap_content&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_height</span><span class=\"s2\">=&quot;wrap_content&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:id</span><span class=\"s2\">=&quot;@+id/numberPicker_Green&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_alignParentTop</span><span class=\"s2\">=&quot;true&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_centerHorizontal</span><span class=\"s2\">=&quot;true&quot;</span><span class=\"s0\">/&gt;</span><span class=\"s3\">          </span><span class=\"s0\">&lt;NumberPicker               </span><span class=\"s1\">android:layout_width</span><span class=\"s2\">=&quot;wrap_content&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_height</span><span class=\"s2\">=&quot;wrap_content&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:id</span><span class=\"s2\">=&quot;@+id/numberPicker_Blue&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_alignParentTop</span><span class=\"s2\">=&quot;true&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_alignParentEnd</span><span class=\"s2\">=&quot;true&quot;</span><span class=\"s0\">/&gt;</span><span class=\"s3\">          </span><span class=\"s0\">&lt;ImageView               </span><span class=\"s1\">android:layout_width</span><span class=\"s2\">=&quot;wrap_content&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_height</span><span class=\"s2\">=&quot;wrap_content&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:id</span><span class=\"s2\">=&quot;@+id/imageView&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_alignParentBottom</span><span class=\"s2\">=&quot;true&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_alignEnd</span><span class=\"s2\">=&quot;@+id/numberPicker_Blue&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_below</span><span class=\"s2\">=&quot;@+id/numberPicker_Red&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:layout_alignParentStart</span><span class=\"s2\">=&quot;true&quot;</span><span class=\"s0\">               </span><span class=\"s1\">android:contentDescription</span><span class=\"s2\">=&quot;@string/image_view&quot;</span><span class=\"s0\">/&gt;</span><span class=\"s3\">      </span><span class=\"s0\">&lt;/RelativeLayout&gt;</span><span class=\"s3\">   </span></pre>            <p>      On the back end of ColorPicker, we can observe MainActivity.java “listening” for user’s input on the View, doing some calculations, and producing a result that is displayed to the user in the View again. This listening is done via “setValueOnChangeListener()”.      This method is attached to each of the three NumberPicker’s set in MainActivity.java, and each accepts an anonymous inner class “new NumberPicker.OnValueChangeListener()”. Within this anonymous class we can take the new value of each number picker      and call our own custom method “resetBackgroundColor()” which takes the value of each of the three global “color” variables and sets the background color of the ImageButton to the new color via “mColorBox.setBackgroundColor(Color.rgb(red, green, blue))”.      This results in a new color observed by the user in activity_main.xml. Observe MainActivity.java below:    </p>    <title>MainActivity.java</title>  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">  <style type=\"text/css\">  .ln { color: rgb(0,0,0); font-weight: normal; font-style: normal; }  .s0 { color: rgb(204,120,50); }  .s1 { color: rgb(169,183,198); }  .s2 { color: rgb(104,151,187); }  .s3 { color: rgb(128,128,128); }  </style>    <TABLE CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH=\"100%\" BGCOLOR=\"#C0C0C0\" >  <TR><TD><CENTER>  <FONT FACE=\"Arial, Helvetica\" COLOR=\"#000000\">  MainActivity.java</FONT>  </center></TD></TR></TABLE>  <pre>    <span class=\"s0\">package </span><span class=\"s1\">com.kylefrisbie.colorpicker.app</span><span class=\"s0\">;</span><span class=\"s1\">      </span><span class=\"s0\">import </span><span class=\"s1\">android.app.Activity</span><span class=\"s0\">;</span><span class=\"s1\">   </span><span class=\"s0\">import </span><span class=\"s1\">android.graphics.Color</span><span class=\"s0\">;</span><span class=\"s1\">   </span><span class=\"s0\">import </span><span class=\"s1\">android.os.Bundle</span><span class=\"s0\">;</span><span class=\"s1\">   </span><span class=\"s0\">import </span><span class=\"s1\">android.view.Menu</span><span class=\"s0\">;</span><span class=\"s1\">   </span><span class=\"s0\">import </span><span class=\"s1\">android.view.MenuItem</span><span class=\"s0\">;</span><span class=\"s1\">   </span><span class=\"s0\">import </span><span class=\"s1\">android.view.MotionEvent</span><span class=\"s0\">;</span><span class=\"s1\">   </span><span class=\"s0\">import </span><span class=\"s1\">android.view.View</span><span class=\"s0\">;</span><span class=\"s1\">   </span><span class=\"s0\">import </span><span class=\"s1\">android.widget.ImageView</span><span class=\"s0\">;</span><span class=\"s1\">   </span><span class=\"s0\">import </span><span class=\"s1\">android.widget.NumberPicker</span><span class=\"s0\">;</span><span class=\"s1\">         </span><span class=\"s0\">public class </span><span class=\"s1\">MainActivity </span><span class=\"s0\">extends </span><span class=\"s1\">Activity {          </span><span class=\"s0\">private </span><span class=\"s1\">NumberPicker mRedButton</span><span class=\"s0\">, </span><span class=\"s1\">mBlueButton</span><span class=\"s0\">, </span><span class=\"s1\">mGreenButton</span><span class=\"s0\">;</span><span class=\"s1\">       </span><span class=\"s0\">private </span><span class=\"s1\">ImageView mColorBox</span><span class=\"s0\">;</span><span class=\"s1\">       </span><span class=\"s0\">private final int </span><span class=\"s1\">MIN_VALUE = </span><span class=\"s2\">0</span><span class=\"s0\">;</span><span class=\"s1\">       </span><span class=\"s0\">private final int </span><span class=\"s1\">MAX_VALUE = </span><span class=\"s2\">255</span><span class=\"s0\">;</span><span class=\"s1\">       </span><span class=\"s0\">private int </span><span class=\"s1\">red</span><span class=\"s0\">, </span><span class=\"s1\">green</span><span class=\"s0\">, </span><span class=\"s1\">blue = </span><span class=\"s2\">0</span><span class=\"s0\">;</span><span class=\"s1\">          </span><span class=\"s0\">protected void </span><span class=\"s1\">initializeNumberPicker(NumberPicker picker) {           picker.setMinValue(MIN_VALUE)</span><span class=\"s0\">;</span><span class=\"s1\">           picker.setMaxValue(MAX_VALUE)</span><span class=\"s0\">;</span><span class=\"s1\">       }          </span><span class=\"s0\">protected void </span><span class=\"s1\">resetBackgroundColor() {           mColorBox.setBackgroundColor(Color.rgb(red</span><span class=\"s0\">, </span><span class=\"s1\">green</span><span class=\"s0\">, </span><span class=\"s1\">blue))</span><span class=\"s0\">;</span><span class=\"s1\">       }          @Override       </span><span class=\"s0\">protected void </span><span class=\"s1\">onCreate(Bundle savedInstanceState) {           </span><span class=\"s0\">super</span><span class=\"s1\">.onCreate(savedInstanceState)</span><span class=\"s0\">;</span><span class=\"s1\">           setContentView(R.layout.activity_main)</span><span class=\"s0\">;</span><span class=\"s1\">              mColorBox = (ImageView)findViewById(R.id.imageView)</span><span class=\"s0\">;</span><span class=\"s1\">           resetBackgroundColor()</span><span class=\"s0\">;</span><span class=\"s1\">              mRedButton = (NumberPicker)findViewById(R.id.numberPicker_Red)</span><span class=\"s0\">;</span><span class=\"s1\">           initializeNumberPicker(mRedButton)</span><span class=\"s0\">;</span><span class=\"s1\">              mRedButton.setOnValueChangedListener(</span><span class=\"s0\">new </span><span class=\"s1\">NumberPicker.OnValueChangeListener() {               @Override               </span><span class=\"s0\">public void </span><span class=\"s1\">onValueChange(NumberPicker picker</span><span class=\"s0\">, int </span><span class=\"s1\">oldVal</span><span class=\"s0\">, int </span><span class=\"s1\">newVal) {                   red = newVal</span><span class=\"s0\">;</span><span class=\"s1\">                   resetBackgroundColor()</span><span class=\"s0\">;</span><span class=\"s1\">               }           })</span><span class=\"s0\">;</span><span class=\"s1\">              mGreenButton = (NumberPicker)findViewById(R.id.numberPicker_Green)</span><span class=\"s0\">;</span><span class=\"s1\">           initializeNumberPicker(mGreenButton)</span><span class=\"s0\">;</span><span class=\"s1\">              mGreenButton.setOnValueChangedListener(</span><span class=\"s0\">new </span><span class=\"s1\">NumberPicker.OnValueChangeListener() {               @Override               </span><span class=\"s0\">public void </span><span class=\"s1\">onValueChange(NumberPicker picker</span><span class=\"s0\">, int </span><span class=\"s1\">oldVal</span><span class=\"s0\">, int </span><span class=\"s1\">newVal) {                   green = newVal</span><span class=\"s0\">;</span><span class=\"s1\">                   resetBackgroundColor()</span><span class=\"s0\">;</span><span class=\"s1\">               }           })</span><span class=\"s0\">;</span><span class=\"s1\">              mBlueButton = (NumberPicker)findViewById(R.id.numberPicker_Blue)</span><span class=\"s0\">;</span><span class=\"s1\">           initializeNumberPicker(mBlueButton)</span><span class=\"s0\">;</span><span class=\"s1\">              mBlueButton.setOnValueChangedListener(</span><span class=\"s0\">new </span><span class=\"s1\">NumberPicker.OnValueChangeListener() {               @Override               </span><span class=\"s0\">public void </span><span class=\"s1\">onValueChange(NumberPicker picker</span><span class=\"s0\">, int </span><span class=\"s1\">oldVal</span><span class=\"s0\">, int </span><span class=\"s1\">newVal) {                   blue = newVal</span><span class=\"s0\">;</span><span class=\"s1\">                   resetBackgroundColor()</span><span class=\"s0\">;</span><span class=\"s1\">               }           })</span><span class=\"s0\">;</span><span class=\"s1\">       }             @Override       </span><span class=\"s0\">public boolean </span><span class=\"s1\">onCreateOptionsMenu(Menu menu) {           </span><span class=\"s3\">// Inflate the menu; this adds items to the action bar if it is present.</span><span class=\"s1\">           getMenuInflater().inflate(R.menu.menu_main</span><span class=\"s0\">, </span><span class=\"s1\">menu)</span><span class=\"s0\">;</span><span class=\"s1\">           </span><span class=\"s0\">return true;</span>      }  }  </span></pre>  <img src=\"https://lh3.googleusercontent.com/Jsv4Zhp7GEZ9IUaScWBKI7VFdJoyg2MTrpSRLS7d4qk=w532-h945-no\"> ", user_id: 2, image_thumbnail_url: "http://i.imgur.com/QzwJ1tOb.jpg"},
  {title: "Trying A New Language: Scala", subtitle: "Principles of Programming Languages", image_url: "http://i.imgur.com/DSYyYRPb.jpg", date_posted: "2015-08-07", date_modified: "2016-03-11", post_body: "<p><strong>Initial Thoughts:</strong></p>  <p>As a component to Principals of Programming Languages; a class I previously took at Metropolitan State University of Denver, I was tasked with writing a fairly basic program in a language I had never used before. The language I selected was Scala. Scala appealed to me because of its various unique offerings. I like the fact that it runs on the Java Virtual Machine and can import all of Java’s powerful classes which I thought would come in handy if I found that Scala’s library was too limited to get the job done. Scala also offers both object-oriented and functional language implementation, on Scala’s home page they brand the language as “Having the best of both worlds” (<a href=\"http://www.scala-lang.org/\"><font color=\"aqua\">www.scala-lang.org</font></a>). This especially appealed to me because I have taken a recent liking to functional programming in prior project’s I have done in Clojure (another functional language).</p>    <p><strong>Program Purpose:</strong></p>  <p>The bulk of this program dealt with reading in various information from a lengthy file, consisting of “Geographical Area Index” information for multiple countries over various years. The objective was to scan the file for countries with the best and worst metrics in specific categories. You can view the geographical data <a href=\"https://github.com/KyleFrisbie/MSUDenver_Projects/blob/master/PrincipalsOfProgrammingLanguages/NewLanguage_Scala/InputFile.txt\"><font color=\"aqua\">here</font>.</a></p>    <p><strong>Implementation and Documentation:</strong></p>  <p>When I settled on using Scala, I was immediately confronted with the challenge of getting the Scala environment to work on my computer. Installing Scala, as well as a Scala plugin for my IDE (IntelliJ) was easy. What was difficult was figuring out how to write and run my Scala code within IntelliJ. I would attribute these early difficulties more to my lack of knowledge of the IntelliJ environment rather than the implementation of Scala, after I understood this, Scala was easy to start using.</p>    <p>I found ample documentation and guides to getting started with Scala, online. There were many tutorials to guide me through writing “Hello, world” programs, as well as tutorials to equip me with the basic tools included in the Scala language; complete with a browser based runtime environment for a safe and efficient learning area. I was surprised to find an active, supportive community around Scala, and I was also surprised to find that Scala can be written in a manner that closely resembles the structure of Java.</p>  <p>The aspects of Scala that I found different from other languages I have used before include the following. Scala allows the programmer to create two different types of Scala objects: classes and objects. Classes are similar to the structure of what you would see in Java, complete with the ability to write constructors, variables, and various methods. Multiple instances of any given class can be created throughout a particular program. This is where the key difference can be found between Scala’s classes and objects. I had also never written in a language that allowed inferred types. Scala is able to infer the type of a variable just by what is assigned to it. For example if the program states var oneNum = 3, then the variable “oneNum” would be assigned the type Int and the value 3. Scala also includes a different vocabulary for final variables that should only have one thing assigned to them. The keyword to do this is val, and to use it all that is needed is to replace “var” with val. Objects are essentially a class where only one instance can be created. It was also interesting to see a language that allowed both object oriented, as well as functional implementation.</p>    <p>Is it too broad to say that I think Scala is best suited for almost all types of applications? The fact that Scala can be both functional, as well as object oriented; puts it heads and shoulders above other languages I have used in the past. The impression I have after this brief stint with Scala is that it has the potential to be a very versatile language, and if a programmer takes the time to learn the finer points of the language, its applications can be very impactful.</p>    <p><strong>Libraries and Tools:</strong></p>  <p>The provided libraries are very good. The online documentation provided specific examples on how to implement different functions within the libraries and was very easy to understand. In many ways, the documentation for Scala’s libraries were much easier to read and understand compared to Java’s. The one library I found lacking was Scala’s I/O. Being used to Java, I am used to the very powerful Scanner class that allows for all sorts of input stream manipulation. Scala did offer its own form of a Scanner, but many of the methods included in the Scanner class were deprecated or longer supported, which was extremely frustrating. Because Scala is able to import Java’s classes, this was a non-issue in my project, but could have proven very frustrating had this not been the case.</p>    <p>I did not have to do much searching/research on the available tools for Scala because they were readily available and compatible with structures I already had in place. As mentioned earlier, the IDE I use is IntelliJ, and there was already a Scala plugin ready to download that had been developed by the IntelliJ team; this made for extremely easy integration with an IDE that I was already familiar with. Installing Scala on my machine was also very straight forward, it was as easy as navigating to Scala’s webpage and following the link to install Scala on my machine. This installation included everything needed to run Scala. I have also briefly mentioned Scala’s documentation, but I think it is worth reiterating. Scala has ample documentation included to make almost any programming application straightforward to implement. The documentation includes both examples and descriptions of all classes and methods, as well as links to similar items you might be interested in. There is an active community posting their own examples, tutorials and guides to using Scala, in the case that you aren’t finding what you are looking for within Scala’s documentation.</p>    <p><strong>Reccommend?</strong></p>  <p>Learning and applying Scala was a very fun and interesting experience. If you haven’t used Scala before, I would recommend it. I see myself continuing to use Scala. I feel that I have barely scratched the surface of Scala’s potential, and that my early programming application does not come close to tapping into Scala’s true potential.</p>    <p><strong>The Code:</strong></p>  <p>You can view my Scala code below, or <a href=\"https://github.com/KyleFrisbie/MSUDenver_Projects/tree/master/PrincipalsOfProgrammingLanguages/NewLanguage_Scala\"><font color=\"aqua\">here at GitHub</font></a>.</p>    <title>ExportAnalysis.scala</title>  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">  <style type=\"text/css\">  .ln { color: rgb(0,0,0); font-weight: normal; font-style: normal; }  .s0 { color: rgb(98,151,85); font-style: italic; }  .s1 { color: rgb(169,183,198); }  .s2 { color: rgb(204,120,50); font-weight: bold; }  .s3 { color: rgb(128,128,128); }  .s4 { color: rgb(98,151,85); font-weight: bold; font-style: italic; }  .s5 { color: rgb(106,135,89); }  .s6 { color: rgb(204,120,50); }  .s7 { color: rgb(104,151,187); }  </style>  </head>  <BODY BGCOLOR=\"#2b2b2b\">  <TABLE CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH=\"100%\" BGCOLOR=\"#C0C0C0\" >  <TR><TD><CENTER>  <FONT FACE=\"Arial, Helvetica\" COLOR=\"#000000\">  ExportAnalysis.scala</FONT>  </center></TD></TR></TABLE>  <pre>    <a name=\"l1\"><span class=\"ln\">1    </span></a><span class=\"s0\">/**   <a name=\"l2\"><span class=\"ln\">2    </span></a> * This program takes an input data file consisting of various information on   <a name=\"l3\"><span class=\"ln\">3    </span></a> *  different countries collected over a period of years. Different data is   <a name=\"l4\"><span class=\"ln\">4    </span></a> *  displayed based on user input.   <a name=\"l5\"><span class=\"ln\">5    </span></a> *   <a name=\"l6\"><span class=\"ln\">6    </span></a> * Created by Kyle L Frisbie on 3/31/2015.   <a name=\"l7\"><span class=\"ln\">7    </span></a> */</span><span class=\"s1\">   <a name=\"l8\"><span class=\"ln\">8    </span></a>   <a name=\"l9\"><span class=\"ln\">9    </span></a></span><span class=\"s2\">import </span><span class=\"s1\">java.io.File   <a name=\"l10\"><span class=\"ln\">10   </span></a></span><span class=\"s2\">import </span><span class=\"s1\">java.util   <a name=\"l11\"><span class=\"ln\">11   </span></a></span><span class=\"s2\">import </span><span class=\"s1\">java.util.Scanner   <a name=\"l12\"><span class=\"ln\">12   </span></a></span><span class=\"s2\">import </span><span class=\"s1\">scala.io.Source   <a name=\"l13\"><span class=\"ln\">13   </span></a>   <a name=\"l14\"><span class=\"ln\">14   </span></a></span><span class=\"s2\">object </span><span class=\"s1\">ExportAnalysis {   <a name=\"l15\"><span class=\"ln\">15   </span></a>  </span><span class=\"s2\">val </span><span class=\"s1\">KB = </span><span class=\"s2\">new </span><span class=\"s1\">Scanner(System.in) </span><span class=\"s3\">// Reads user input from console</span><span class=\"s1\">   <a name=\"l16\"><span class=\"ln\">16   </span></a>  </span><span class=\"s2\">val </span><span class=\"s1\">INPUT_FILE = </span><span class=\"s2\">new </span><span class=\"s1\">Scanner(establishInputFile())  </span><span class=\"s3\">// Scans input file</span><span class=\"s1\">   <a name=\"l17\"><span class=\"ln\">17   </span></a>  </span><span class=\"s2\">val </span><span class=\"s1\">countryList = </span><span class=\"s2\">new </span><span class=\"s1\">util.ArrayList[Country] </span><span class=\"s3\">// Complete list of counties</span><span class=\"s1\">   <a name=\"l18\"><span class=\"ln\">18   </span></a>  </span><span class=\"s3\">// List of countries for a given year</span><span class=\"s1\">   <a name=\"l19\"><span class=\"ln\">19   </span></a>  </span><span class=\"s2\">var </span><span class=\"s1\">yearList = </span><span class=\"s2\">new </span><span class=\"s1\">util.ArrayList[Country]()   <a name=\"l20\"><span class=\"ln\">20   </span></a>   <a name=\"l21\"><span class=\"ln\">21   </span></a>   <a name=\"l22\"><span class=\"ln\">22   </span></a>  </span><span class=\"s0\">/**   <a name=\"l23\"><span class=\"ln\">23   </span></a>   * Initialize initial input file for Scanning   <a name=\"l24\"><span class=\"ln\">24   </span></a>   * </span><span class=\"s4\">@return </span><span class=\"s0\">File inputFile   <a name=\"l25\"><span class=\"ln\">25   </span></a>   */</span><span class=\"s1\">   <a name=\"l26\"><span class=\"ln\">26   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">establishInputFile(): File = {   <a name=\"l27\"><span class=\"ln\">27   </span></a>    </span><span class=\"s2\">val </span><span class=\"s1\">fileIn = </span><span class=\"s2\">new </span><span class=\"s1\">File(</span><span class=\"s5\">&quot;InputFile.txt&quot;</span><span class=\"s1\">)   <a name=\"l28\"><span class=\"ln\">28   </span></a>    fileIn   <a name=\"l29\"><span class=\"ln\">29   </span></a>  }   <a name=\"l30\"><span class=\"ln\">30   </span></a>   <a name=\"l31\"><span class=\"ln\">31   </span></a>  </span><span class=\"s0\">/**   <a name=\"l32\"><span class=\"ln\">32   </span></a>   * Take year from user input (console)   <a name=\"l33\"><span class=\"ln\">33   </span></a>   * </span><span class=\"s4\">@return </span><span class=\"s0\">Int year   <a name=\"l34\"><span class=\"ln\">34   </span></a>   */</span><span class=\"s1\">   <a name=\"l35\"><span class=\"ln\">35   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">getYear(): Int = {   <a name=\"l36\"><span class=\"ln\">36   </span></a>    print(</span><span class=\"s5\">&quot;Enter the year you are interested in: &quot;</span><span class=\"s1\">)   <a name=\"l37\"><span class=\"ln\">37   </span></a>    </span><span class=\"s2\">return </span><span class=\"s1\">KB.nextInt()   <a name=\"l38\"><span class=\"ln\">38   </span></a>  }   <a name=\"l39\"><span class=\"ln\">39   </span></a>   <a name=\"l40\"><span class=\"ln\">40   </span></a>  </span><span class=\"s0\">/**   <a name=\"l41\"><span class=\"ln\">41   </span></a>   * Take operative selection from user (console)   <a name=\"l42\"><span class=\"ln\">42   </span></a>   * </span><span class=\"s4\">@return </span><span class=\"s0\">Int user selection   <a name=\"l43\"><span class=\"ln\">43   </span></a>   */</span><span class=\"s1\">   <a name=\"l44\"><span class=\"ln\">44   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">getUserChoice(): Int = {   <a name=\"l45\"><span class=\"ln\">45   </span></a>    println(</span><span class=\"s5\">&quot;Make a selection (1 - 7)&quot;</span><span class=\"s1\">)   <a name=\"l46\"><span class=\"ln\">46   </span></a>    println(   <a name=\"l47\"><span class=\"ln\">47   </span></a>      </span><span class=\"s5\">&quot;(1) Finding the top 5 exporting countries for a given year.&quot; </span><span class=\"s1\">+   <a name=\"l48\"><span class=\"ln\">48   </span></a>        </span><span class=\"s5\">&quot;</span><span class=\"s6\">\\n</span><span class=\"s5\">(2) Finding the worst 5 exporting countries for a given year.&quot; </span><span class=\"s1\">+   <a name=\"l49\"><span class=\"ln\">49   </span></a>        </span><span class=\"s5\">&quot;</span><span class=\"s6\">\\n</span><span class=\"s5\">(3) Finding the 5 countries with the best balance of trade for &quot; </span><span class=\"s1\">+   <a name=\"l50\"><span class=\"ln\">50   </span></a>        </span><span class=\"s5\">&quot;a given year.&quot; </span><span class=\"s1\">+   <a name=\"l51\"><span class=\"ln\">51   </span></a>        </span><span class=\"s5\">&quot;</span><span class=\"s6\">\\n</span><span class=\"s5\">(4) Finding the 5 countries with the worst balance of trade for &quot; </span><span class=\"s1\">+   <a name=\"l52\"><span class=\"ln\">52   </span></a>        </span><span class=\"s5\">&quot;a given year.&quot; </span><span class=\"s1\">+   <a name=\"l53\"><span class=\"ln\">53   </span></a>        </span><span class=\"s5\">&quot;</span><span class=\"s6\">\\n</span><span class=\"s5\">(5) Finding the 5 countries with the best ratio of exports to &quot; </span><span class=\"s1\">+   <a name=\"l54\"><span class=\"ln\">54   </span></a>        </span><span class=\"s5\">&quot;balance of trade for a given year.&quot; </span><span class=\"s1\">+   <a name=\"l55\"><span class=\"ln\">55   </span></a>        </span><span class=\"s5\">&quot;</span><span class=\"s6\">\\n</span><span class=\"s5\">(6) Finding the 5 countries with the worst ratio of exports to &quot; </span><span class=\"s1\">+   <a name=\"l56\"><span class=\"ln\">56   </span></a>        </span><span class=\"s5\">&quot;balance of trade for a given year.&quot; </span><span class=\"s1\">+   <a name=\"l57\"><span class=\"ln\">57   </span></a>        </span><span class=\"s5\">&quot;</span><span class=\"s6\">\\n</span><span class=\"s5\">(7) Finding all data for a given country.&quot;</span><span class=\"s1\">)   <a name=\"l58\"><span class=\"ln\">58   </span></a>    print(</span><span class=\"s5\">&quot;Enter your selection: &quot;</span><span class=\"s1\">)   <a name=\"l59\"><span class=\"ln\">59   </span></a>    </span><span class=\"s2\">return </span><span class=\"s1\">KB.nextInt()   <a name=\"l60\"><span class=\"ln\">60   </span></a>  }   <a name=\"l61\"><span class=\"ln\">61   </span></a>   <a name=\"l62\"><span class=\"ln\">62   </span></a>  </span><span class=\"s0\">/**   <a name=\"l63\"><span class=\"ln\">63   </span></a>   * Take name of country from user selection (console)   <a name=\"l64\"><span class=\"ln\">64   </span></a>   * </span><span class=\"s4\">@return </span><span class=\"s0\">String name of country   <a name=\"l65\"><span class=\"ln\">65   </span></a>   */</span><span class=\"s1\">   <a name=\"l66\"><span class=\"ln\">66   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">getCountryName(): String = {   <a name=\"l67\"><span class=\"ln\">67   </span></a>    print(</span><span class=\"s5\">&quot;Enter name of country: &quot;</span><span class=\"s1\">)   <a name=\"l68\"><span class=\"ln\">68   </span></a>    </span><span class=\"s2\">return </span><span class=\"s1\">KB.next()   <a name=\"l69\"><span class=\"ln\">69   </span></a>  }   <a name=\"l70\"><span class=\"ln\">70   </span></a>   <a name=\"l71\"><span class=\"ln\">71   </span></a>  </span><span class=\"s0\">/**   <a name=\"l72\"><span class=\"ln\">72   </span></a>   * Build complete array of information parsed from input file   <a name=\"l73\"><span class=\"ln\">73   </span></a>   */</span><span class=\"s1\">   <a name=\"l74\"><span class=\"ln\">74   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">buildArray(): Unit = {   <a name=\"l75\"><span class=\"ln\">75   </span></a>    </span><span class=\"s2\">var </span><span class=\"s1\">i = </span><span class=\"s7\">0</span><span class=\"s1\">   <a name=\"l76\"><span class=\"ln\">76   </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">1 </span><span class=\"s1\">to </span><span class=\"s7\">20</span><span class=\"s1\">) {   <a name=\"l77\"><span class=\"ln\">77   </span></a>      INPUT_FILE.nextLine()   <a name=\"l78\"><span class=\"ln\">78   </span></a>    }   <a name=\"l79\"><span class=\"ln\">79   </span></a>    </span><span class=\"s2\">while </span><span class=\"s1\">(INPUT_FILE.hasNext) {   <a name=\"l80\"><span class=\"ln\">80   </span></a>      </span><span class=\"s2\">val </span><span class=\"s1\">nextLine = INPUT_FILE.nextLine()   <a name=\"l81\"><span class=\"ln\">81   </span></a>      </span><span class=\"s2\">val </span><span class=\"s1\">tokens = nextLine.split(</span><span class=\"s5\">&quot;,&quot;</span><span class=\"s1\">)   <a name=\"l82\"><span class=\"ln\">82   </span></a>      </span><span class=\"s2\">val </span><span class=\"s1\">country = </span><span class=\"s2\">new </span><span class=\"s1\">Country   <a name=\"l83\"><span class=\"ln\">83   </span></a>      country.setName(tokens(</span><span class=\"s7\">0</span><span class=\"s1\">))   <a name=\"l84\"><span class=\"ln\">84   </span></a>      country.setExports(tokens(</span><span class=\"s7\">1</span><span class=\"s1\">).toInt)   <a name=\"l85\"><span class=\"ln\">85   </span></a>      country.setTradeBalance(tokens(</span><span class=\"s7\">2</span><span class=\"s1\">).toInt)   <a name=\"l86\"><span class=\"ln\">86   </span></a>      country.setYear(tokens(</span><span class=\"s7\">3</span><span class=\"s1\">).toInt)   <a name=\"l87\"><span class=\"ln\">87   </span></a>      country.setPopulation(tokens(</span><span class=\"s7\">4</span><span class=\"s1\">).toInt)   <a name=\"l88\"><span class=\"ln\">88   </span></a>      country.setArea(tokens(</span><span class=\"s7\">5</span><span class=\"s1\">).toInt)   <a name=\"l89\"><span class=\"ln\">89   </span></a>      countryList.add(country)   <a name=\"l90\"><span class=\"ln\">90   </span></a>    }   <a name=\"l91\"><span class=\"ln\">91   </span></a>  }   <a name=\"l92\"><span class=\"ln\">92   </span></a>   <a name=\"l93\"><span class=\"ln\">93   </span></a>  </span><span class=\"s0\">/**   <a name=\"l94\"><span class=\"ln\">94   </span></a>   * Sort yearList for top 5 worst exporting countries   <a name=\"l95\"><span class=\"ln\">95   </span></a>   */</span><span class=\"s1\">   <a name=\"l96\"><span class=\"ln\">96   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">sortByWorstExports(): Unit = {   <a name=\"l97\"><span class=\"ln\">97   </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">1 </span><span class=\"s1\">until (yearList.size())) {   <a name=\"l98\"><span class=\"ln\">98   </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">temp = yearList.get(i)   <a name=\"l99\"><span class=\"ln\">99   </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">j = i   <a name=\"l100\"><span class=\"ln\">100  </span></a>      </span><span class=\"s2\">while </span><span class=\"s1\">(j &gt; </span><span class=\"s7\">0 </span><span class=\"s1\">&amp;&amp; yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">).takeExports() &gt; temp.takeExports()) {   <a name=\"l101\"><span class=\"ln\">101  </span></a>        yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">))   <a name=\"l102\"><span class=\"ln\">102  </span></a>        j -= </span><span class=\"s7\">1</span><span class=\"s1\">   <a name=\"l103\"><span class=\"ln\">103  </span></a>      }   <a name=\"l104\"><span class=\"ln\">104  </span></a>      yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">temp)   <a name=\"l105\"><span class=\"ln\">105  </span></a>    }   <a name=\"l106\"><span class=\"ln\">106  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">0 </span><span class=\"s1\">until </span><span class=\"s7\">5</span><span class=\"s1\">) {   <a name=\"l107\"><span class=\"ln\">107  </span></a>      println(yearList.get(i).returnAllInfo())   <a name=\"l108\"><span class=\"ln\">108  </span></a>    }   <a name=\"l109\"><span class=\"ln\">109  </span></a>  }   <a name=\"l110\"><span class=\"ln\">110  </span></a>   <a name=\"l111\"><span class=\"ln\">111  </span></a>  </span><span class=\"s0\">/**   <a name=\"l112\"><span class=\"ln\">112  </span></a>   * Sort yearList for top 5 best exporting countries   <a name=\"l113\"><span class=\"ln\">113  </span></a>   */</span><span class=\"s1\">   <a name=\"l114\"><span class=\"ln\">114  </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">sortByBestExports(): Unit = {   <a name=\"l115\"><span class=\"ln\">115  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">1 </span><span class=\"s1\">until (yearList.size())) {   <a name=\"l116\"><span class=\"ln\">116  </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">temp = yearList.get(i)   <a name=\"l117\"><span class=\"ln\">117  </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">j = i   <a name=\"l118\"><span class=\"ln\">118  </span></a>      </span><span class=\"s2\">while </span><span class=\"s1\">(j &gt; </span><span class=\"s7\">0 </span><span class=\"s1\">&amp;&amp; yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">).takeExports() &lt; temp.takeExports()) {   <a name=\"l119\"><span class=\"ln\">119  </span></a>        yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">))   <a name=\"l120\"><span class=\"ln\">120  </span></a>        j -= </span><span class=\"s7\">1</span><span class=\"s1\">   <a name=\"l121\"><span class=\"ln\">121  </span></a>      }   <a name=\"l122\"><span class=\"ln\">122  </span></a>      yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">temp)   <a name=\"l123\"><span class=\"ln\">123  </span></a>    }   <a name=\"l124\"><span class=\"ln\">124  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">0 </span><span class=\"s1\">until </span><span class=\"s7\">5</span><span class=\"s1\">) {   <a name=\"l125\"><span class=\"ln\">125  </span></a>      println(yearList.get(i).returnAllInfo())   <a name=\"l126\"><span class=\"ln\">126  </span></a>    }   <a name=\"l127\"><span class=\"ln\">127  </span></a>  }   <a name=\"l128\"><span class=\"ln\">128  </span></a>   <a name=\"l129\"><span class=\"ln\">129  </span></a>  </span><span class=\"s0\">/**   <a name=\"l130\"><span class=\"ln\">130  </span></a>   * Sort yearList for top 5 worst balanced countries   <a name=\"l131\"><span class=\"ln\">131  </span></a>   */</span><span class=\"s1\">   <a name=\"l132\"><span class=\"ln\">132  </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">sortByWorstBalance(): Unit = {   <a name=\"l133\"><span class=\"ln\">133  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">1 </span><span class=\"s1\">until (yearList.size())) {   <a name=\"l134\"><span class=\"ln\">134  </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">temp = yearList.get(i)   <a name=\"l135\"><span class=\"ln\">135  </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">j = i   <a name=\"l136\"><span class=\"ln\">136  </span></a>      </span><span class=\"s2\">while </span><span class=\"s1\">(j &gt; </span><span class=\"s7\">0 </span><span class=\"s1\">&amp;&amp;   <a name=\"l137\"><span class=\"ln\">137  </span></a>        yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">).takeTradeBalance() &gt; temp.takeTradeBalance()) {   <a name=\"l138\"><span class=\"ln\">138  </span></a>        yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">))   <a name=\"l139\"><span class=\"ln\">139  </span></a>        j -= </span><span class=\"s7\">1</span><span class=\"s1\">   <a name=\"l140\"><span class=\"ln\">140  </span></a>      }   <a name=\"l141\"><span class=\"ln\">141  </span></a>      yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">temp)   <a name=\"l142\"><span class=\"ln\">142  </span></a>    }   <a name=\"l143\"><span class=\"ln\">143  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">0 </span><span class=\"s1\">until </span><span class=\"s7\">5</span><span class=\"s1\">) {   <a name=\"l144\"><span class=\"ln\">144  </span></a>      println(yearList.get(i).returnAllInfo())   <a name=\"l145\"><span class=\"ln\">145  </span></a>    }   <a name=\"l146\"><span class=\"ln\">146  </span></a>  }   <a name=\"l147\"><span class=\"ln\">147  </span></a>   <a name=\"l148\"><span class=\"ln\">148  </span></a>  </span><span class=\"s0\">/**   <a name=\"l149\"><span class=\"ln\">149  </span></a>   * Sort yearList for top 5 best balanced countries   <a name=\"l150\"><span class=\"ln\">150  </span></a>   */</span><span class=\"s1\">   <a name=\"l151\"><span class=\"ln\">151  </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">sortByBestBalance(): Unit = {   <a name=\"l152\"><span class=\"ln\">152  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">1 </span><span class=\"s1\">until (yearList.size())) {   <a name=\"l153\"><span class=\"ln\">153  </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">temp = yearList.get(i)   <a name=\"l154\"><span class=\"ln\">154  </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">j = i   <a name=\"l155\"><span class=\"ln\">155  </span></a>      </span><span class=\"s2\">while </span><span class=\"s1\">(j &gt; </span><span class=\"s7\">0 </span><span class=\"s1\">&amp;&amp;   <a name=\"l156\"><span class=\"ln\">156  </span></a>        yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">).takeTradeBalance() &lt; temp.takeTradeBalance()) {   <a name=\"l157\"><span class=\"ln\">157  </span></a>        yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">))   <a name=\"l158\"><span class=\"ln\">158  </span></a>        j -= </span><span class=\"s7\">1</span><span class=\"s1\">   <a name=\"l159\"><span class=\"ln\">159  </span></a>      }   <a name=\"l160\"><span class=\"ln\">160  </span></a>      yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">temp)   <a name=\"l161\"><span class=\"ln\">161  </span></a>    }   <a name=\"l162\"><span class=\"ln\">162  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">0 </span><span class=\"s1\">until </span><span class=\"s7\">5</span><span class=\"s1\">) {   <a name=\"l163\"><span class=\"ln\">163  </span></a>      println(yearList.get(i).returnAllInfo())   <a name=\"l164\"><span class=\"ln\">164  </span></a>    }   <a name=\"l165\"><span class=\"ln\">165  </span></a>  }   <a name=\"l166\"><span class=\"ln\">166  </span></a>   <a name=\"l167\"><span class=\"ln\">167  </span></a>  </span><span class=\"s0\">/**   <a name=\"l168\"><span class=\"ln\">168  </span></a>   * Sort yearList for top 5 worst export to balance ratio   <a name=\"l169\"><span class=\"ln\">169  </span></a>   */</span><span class=\"s1\">   <a name=\"l170\"><span class=\"ln\">170  </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">sortByWorstRatio(): Unit = {   <a name=\"l171\"><span class=\"ln\">171  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">1 </span><span class=\"s1\">until (yearList.size())) {   <a name=\"l172\"><span class=\"ln\">172  </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">temp = yearList.get(i)   <a name=\"l173\"><span class=\"ln\">173  </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">j = i   <a name=\"l174\"><span class=\"ln\">174  </span></a>      </span><span class=\"s2\">while </span><span class=\"s1\">(j &gt; </span><span class=\"s7\">0 </span><span class=\"s1\">&amp;&amp;   <a name=\"l175\"><span class=\"ln\">175  </span></a>        yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">).takeExports() /   <a name=\"l176\"><span class=\"ln\">176  </span></a>          yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">).takeTradeBalance()   <a name=\"l177\"><span class=\"ln\">177  </span></a>          &gt; temp.takeExports() / temp.takeTradeBalance()) {   <a name=\"l178\"><span class=\"ln\">178  </span></a>        yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">))   <a name=\"l179\"><span class=\"ln\">179  </span></a>        j -= </span><span class=\"s7\">1</span><span class=\"s1\">   <a name=\"l180\"><span class=\"ln\">180  </span></a>      }   <a name=\"l181\"><span class=\"ln\">181  </span></a>      yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">temp)   <a name=\"l182\"><span class=\"ln\">182  </span></a>    }   <a name=\"l183\"><span class=\"ln\">183  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">0 </span><span class=\"s1\">until </span><span class=\"s7\">5</span><span class=\"s1\">) {   <a name=\"l184\"><span class=\"ln\">184  </span></a>      println(yearList.get(i).returnAllInfo())   <a name=\"l185\"><span class=\"ln\">185  </span></a>    }   <a name=\"l186\"><span class=\"ln\">186  </span></a>  }   <a name=\"l187\"><span class=\"ln\">187  </span></a>   <a name=\"l188\"><span class=\"ln\">188  </span></a>  </span><span class=\"s0\">/**   <a name=\"l189\"><span class=\"ln\">189  </span></a>   * Sort yearList for top 5 best export to balance ratio   <a name=\"l190\"><span class=\"ln\">190  </span></a>   */</span><span class=\"s1\">   <a name=\"l191\"><span class=\"ln\">191  </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">sortByBestRatio(): Unit = {   <a name=\"l192\"><span class=\"ln\">192  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">1 </span><span class=\"s1\">until (yearList.size())) {   <a name=\"l193\"><span class=\"ln\">193  </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">temp = yearList.get(i)   <a name=\"l194\"><span class=\"ln\">194  </span></a>      </span><span class=\"s2\">var </span><span class=\"s1\">j = i   <a name=\"l195\"><span class=\"ln\">195  </span></a>      </span><span class=\"s2\">while </span><span class=\"s1\">(j &gt; </span><span class=\"s7\">0 </span><span class=\"s1\">&amp;&amp;   <a name=\"l196\"><span class=\"ln\">196  </span></a>        yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">).takeExports() /   <a name=\"l197\"><span class=\"ln\">197  </span></a>          yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">).takeTradeBalance()   <a name=\"l198\"><span class=\"ln\">198  </span></a>          &lt; temp.takeExports() / temp.takeTradeBalance()) {   <a name=\"l199\"><span class=\"ln\">199  </span></a>        yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">yearList.get(j - </span><span class=\"s7\">1</span><span class=\"s1\">))   <a name=\"l200\"><span class=\"ln\">200  </span></a>        j -= </span><span class=\"s7\">1</span><span class=\"s1\">   <a name=\"l201\"><span class=\"ln\">201  </span></a>      }   <a name=\"l202\"><span class=\"ln\">202  </span></a>      yearList.set(j</span><span class=\"s6\">, </span><span class=\"s1\">temp)   <a name=\"l203\"><span class=\"ln\">203  </span></a>    }   <a name=\"l204\"><span class=\"ln\">204  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">0 </span><span class=\"s1\">until </span><span class=\"s7\">5</span><span class=\"s1\">) {   <a name=\"l205\"><span class=\"ln\">205  </span></a>      println(yearList.get(i).returnAllInfo())   <a name=\"l206\"><span class=\"ln\">206  </span></a>    }   <a name=\"l207\"><span class=\"ln\">207  </span></a>  }   <a name=\"l208\"><span class=\"ln\">208  </span></a>   <a name=\"l209\"><span class=\"ln\">209  </span></a>  </span><span class=\"s0\">/**   <a name=\"l210\"><span class=\"ln\">210  </span></a>   * Generate Array List (yearList) of information only in selected year   <a name=\"l211\"><span class=\"ln\">211  </span></a>   * </span><span class=\"s4\">@param year </span><span class=\"s0\">Int user defined year   <a name=\"l212\"><span class=\"ln\">212  </span></a>   */</span><span class=\"s1\">   <a name=\"l213\"><span class=\"ln\">213  </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">findYear(year: Int): Unit = {   <a name=\"l214\"><span class=\"ln\">214  </span></a>    yearList = </span><span class=\"s2\">new </span><span class=\"s1\">util.ArrayList[Country]()   <a name=\"l215\"><span class=\"ln\">215  </span></a>    </span><span class=\"s2\">var </span><span class=\"s1\">i = </span><span class=\"s7\">0</span><span class=\"s1\">   <a name=\"l216\"><span class=\"ln\">216  </span></a>    </span><span class=\"s2\">while </span><span class=\"s1\">(i &lt; countryList.size()) {   <a name=\"l217\"><span class=\"ln\">217  </span></a>      </span><span class=\"s2\">if </span><span class=\"s1\">(countryList.get(i).takeYear() == year) {   <a name=\"l218\"><span class=\"ln\">218  </span></a>        yearList.add(countryList.get(i))   <a name=\"l219\"><span class=\"ln\">219  </span></a>      }   <a name=\"l220\"><span class=\"ln\">220  </span></a>      i += </span><span class=\"s7\">1</span><span class=\"s1\">   <a name=\"l221\"><span class=\"ln\">221  </span></a>    }   <a name=\"l222\"><span class=\"ln\">222  </span></a>  }   <a name=\"l223\"><span class=\"ln\">223  </span></a>   <a name=\"l224\"><span class=\"ln\">224  </span></a>  </span><span class=\"s0\">/**   <a name=\"l225\"><span class=\"ln\">225  </span></a>   * Scan countryList for user defined country   <a name=\"l226\"><span class=\"ln\">226  </span></a>   * </span><span class=\"s4\">@param country </span><span class=\"s0\">String user defined country   <a name=\"l227\"><span class=\"ln\">227  </span></a>   */</span><span class=\"s1\">   <a name=\"l228\"><span class=\"ln\">228  </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">findCountry(country: String): Unit = {   <a name=\"l229\"><span class=\"ln\">229  </span></a>    </span><span class=\"s2\">for </span><span class=\"s1\">(i &lt;- </span><span class=\"s7\">0 </span><span class=\"s1\">until countryList.size()) {   <a name=\"l230\"><span class=\"ln\">230  </span></a>      </span><span class=\"s2\">if </span><span class=\"s1\">(countryList.get(i).takeName().equals(country)) {   <a name=\"l231\"><span class=\"ln\">231  </span></a>        println(countryList.get(i).returnAllInfo())   <a name=\"l232\"><span class=\"ln\">232  </span></a>      }   <a name=\"l233\"><span class=\"ln\">233  </span></a>    }   <a name=\"l234\"><span class=\"ln\">234  </span></a>  }   <a name=\"l235\"><span class=\"ln\">235  </span></a>   <a name=\"l236\"><span class=\"ln\">236  </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">main(args: Array[String]) {   <a name=\"l237\"><span class=\"ln\">237  </span></a>   <a name=\"l238\"><span class=\"ln\">238  </span></a>    </span><span class=\"s2\">val </span><span class=\"s1\">selection = getUserChoice() </span><span class=\"s3\">// Get method selection from user</span><span class=\"s1\">   <a name=\"l239\"><span class=\"ln\">239  </span></a>   <a name=\"l240\"><span class=\"ln\">240  </span></a>    buildArray  </span><span class=\"s3\">// Generate countryList ArrayList</span><span class=\"s1\">   <a name=\"l241\"><span class=\"ln\">241  </span></a>   <a name=\"l242\"><span class=\"ln\">242  </span></a>    </span><span class=\"s3\">// If year is needed, get year from user</span><span class=\"s1\">   <a name=\"l243\"><span class=\"ln\">243  </span></a>    </span><span class=\"s2\">if </span><span class=\"s1\">(selection &lt; </span><span class=\"s7\">7</span><span class=\"s1\">) {   <a name=\"l244\"><span class=\"ln\">244  </span></a>      </span><span class=\"s2\">val </span><span class=\"s1\">year = getYear()   <a name=\"l245\"><span class=\"ln\">245  </span></a>      findYear(year)   <a name=\"l246\"><span class=\"ln\">246  </span></a>    }   <a name=\"l247\"><span class=\"ln\">247  </span></a>   <a name=\"l248\"><span class=\"ln\">248  </span></a>    selection </span><span class=\"s2\">match </span><span class=\"s1\">{   <a name=\"l249\"><span class=\"ln\">249  </span></a>      </span><span class=\"s2\">case </span><span class=\"s7\">1 </span><span class=\"s1\">=&gt; sortByBestExports()   <a name=\"l250\"><span class=\"ln\">250  </span></a>      </span><span class=\"s2\">case </span><span class=\"s7\">2 </span><span class=\"s1\">=&gt; sortByWorstExports()   <a name=\"l251\"><span class=\"ln\">251  </span></a>      </span><span class=\"s2\">case </span><span class=\"s7\">3 </span><span class=\"s1\">=&gt; sortByBestBalance()   <a name=\"l252\"><span class=\"ln\">252  </span></a>      </span><span class=\"s2\">case </span><span class=\"s7\">4 </span><span class=\"s1\">=&gt; sortByWorstBalance()   <a name=\"l253\"><span class=\"ln\">253  </span></a>      </span><span class=\"s2\">case </span><span class=\"s7\">5 </span><span class=\"s1\">=&gt; sortByBestRatio()   <a name=\"l254\"><span class=\"ln\">254  </span></a>      </span><span class=\"s2\">case </span><span class=\"s7\">6 </span><span class=\"s1\">=&gt; sortByWorstRatio()   <a name=\"l255\"><span class=\"ln\">255  </span></a>      </span><span class=\"s2\">case </span><span class=\"s7\">7 </span><span class=\"s1\">=&gt;   <a name=\"l256\"><span class=\"ln\">256  </span></a>        </span><span class=\"s3\">// Get country name from user and find data with that name in</span><span class=\"s1\">   <a name=\"l257\"><span class=\"ln\">257  </span></a>        </span><span class=\"s3\">//  countryList</span><span class=\"s1\">   <a name=\"l258\"><span class=\"ln\">258  </span></a>        findCountry(getCountryName())   <a name=\"l259\"><span class=\"ln\">259  </span></a>    }   <a name=\"l260\"><span class=\"ln\">260  </span></a>   <a name=\"l261\"><span class=\"ln\">261  </span></a>    KB.close()   <a name=\"l262\"><span class=\"ln\">262  </span></a>    System.exit(</span><span class=\"s7\">0</span><span class=\"s1\">)   <a name=\"l263\"><span class=\"ln\">263  </span></a>  }   <a name=\"l264\"><span class=\"ln\">264  </span></a>}</span></pre>    <title>Country.scala</title>  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">  <style type=\"text/css\">  .ln { color: rgb(0,0,0); font-weight: normal; font-style: normal; }  .s0 { color: rgb(98,151,85); font-style: italic; }  .s1 { color: rgb(169,183,198); }  .s2 { color: rgb(204,120,50); font-weight: bold; }  .s3 { color: rgb(106,135,89); }  .s4 { color: rgb(104,151,187); }  .s5 { color: rgb(128,128,128); }  .s6 { color: rgb(204,120,50); }  </style>  </head>  <BODY BGCOLOR=\"#2b2b2b\">  <TABLE CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH=\"100%\" BGCOLOR=\"#C0C0C0\" >  <TR><TD><CENTER>  <FONT FACE=\"Arial, Helvetica\" COLOR=\"#000000\">  Country.scala</FONT>  </center></TD></TR></TABLE>  <pre>    <a name=\"l1\"><span class=\"ln\">1    </span></a><span class=\"s0\">/**   <a name=\"l2\"><span class=\"ln\">2    </span></a> * Special class for holding all of country information in input data file,   <a name=\"l3\"><span class=\"ln\">3    </span></a> *  with getters and setters   <a name=\"l4\"><span class=\"ln\">4    </span></a> *   <a name=\"l5\"><span class=\"ln\">5    </span></a> * Created by Kyle L Frisbie on 4/3/2015.   <a name=\"l6\"><span class=\"ln\">6    </span></a> */</span><span class=\"s1\">   <a name=\"l7\"><span class=\"ln\">7    </span></a></span><span class=\"s2\">class </span><span class=\"s1\">Country {   <a name=\"l8\"><span class=\"ln\">8    </span></a>  </span><span class=\"s2\">private var </span><span class=\"s1\">NAME = </span><span class=\"s3\">&quot;&quot;</span><span class=\"s1\">   <a name=\"l9\"><span class=\"ln\">9    </span></a>  </span><span class=\"s2\">private var </span><span class=\"s1\">EXPORTS = </span><span class=\"s4\">0</span><span class=\"s1\">   <a name=\"l10\"><span class=\"ln\">10   </span></a>  </span><span class=\"s2\">private var </span><span class=\"s1\">TRADE_BALANCE = </span><span class=\"s4\">0</span><span class=\"s1\">   <a name=\"l11\"><span class=\"ln\">11   </span></a>  </span><span class=\"s2\">private var </span><span class=\"s1\">YEAR = </span><span class=\"s4\">0</span><span class=\"s1\">   <a name=\"l12\"><span class=\"ln\">12   </span></a>  </span><span class=\"s2\">private var </span><span class=\"s1\">POPULATION = </span><span class=\"s4\">0</span><span class=\"s1\">   <a name=\"l13\"><span class=\"ln\">13   </span></a>  </span><span class=\"s2\">private var </span><span class=\"s1\">AREA = </span><span class=\"s4\">0</span><span class=\"s1\">   <a name=\"l14\"><span class=\"ln\">14   </span></a>   <a name=\"l15\"><span class=\"ln\">15   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">takeName(): String = {   <a name=\"l16\"><span class=\"ln\">16   </span></a>    NAME   <a name=\"l17\"><span class=\"ln\">17   </span></a>  }   <a name=\"l18\"><span class=\"ln\">18   </span></a>   <a name=\"l19\"><span class=\"ln\">19   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">setName(inName:String): Unit = {   <a name=\"l20\"><span class=\"ln\">20   </span></a>    NAME = inName   <a name=\"l21\"><span class=\"ln\">21   </span></a>  }   <a name=\"l22\"><span class=\"ln\">22   </span></a>   <a name=\"l23\"><span class=\"ln\">23   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">takeExports(): Int = {   <a name=\"l24\"><span class=\"ln\">24   </span></a>    EXPORTS   <a name=\"l25\"><span class=\"ln\">25   </span></a>  }   <a name=\"l26\"><span class=\"ln\">26   </span></a>   <a name=\"l27\"><span class=\"ln\">27   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">setExports(inExports:Int): Unit = {   <a name=\"l28\"><span class=\"ln\">28   </span></a>    EXPORTS = inExports   <a name=\"l29\"><span class=\"ln\">29   </span></a>  }   <a name=\"l30\"><span class=\"ln\">30   </span></a>   <a name=\"l31\"><span class=\"ln\">31   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">takeTradeBalance(): Int = {   <a name=\"l32\"><span class=\"ln\">32   </span></a>    TRADE_BALANCE   <a name=\"l33\"><span class=\"ln\">33   </span></a>  }   <a name=\"l34\"><span class=\"ln\">34   </span></a>   <a name=\"l35\"><span class=\"ln\">35   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">setTradeBalance(inTradeBalance:Int): Unit = {   <a name=\"l36\"><span class=\"ln\">36   </span></a>    TRADE_BALANCE = inTradeBalance   <a name=\"l37\"><span class=\"ln\">37   </span></a>  }   <a name=\"l38\"><span class=\"ln\">38   </span></a>   <a name=\"l39\"><span class=\"ln\">39   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">takeYear(): Int = {   <a name=\"l40\"><span class=\"ln\">40   </span></a>    YEAR   <a name=\"l41\"><span class=\"ln\">41   </span></a>  }   <a name=\"l42\"><span class=\"ln\">42   </span></a>   <a name=\"l43\"><span class=\"ln\">43   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">setYear(inYear:Int): Unit = {   <a name=\"l44\"><span class=\"ln\">44   </span></a>    YEAR = inYear   <a name=\"l45\"><span class=\"ln\">45   </span></a>  }   <a name=\"l46\"><span class=\"ln\">46   </span></a>   <a name=\"l47\"><span class=\"ln\">47   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">takePopulation(): Int = {   <a name=\"l48\"><span class=\"ln\">48   </span></a>    POPULATION   <a name=\"l49\"><span class=\"ln\">49   </span></a>  }   <a name=\"l50\"><span class=\"ln\">50   </span></a>   <a name=\"l51\"><span class=\"ln\">51   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">setPopulation(inPopulation:Int): Unit = {   <a name=\"l52\"><span class=\"ln\">52   </span></a>    POPULATION = inPopulation   <a name=\"l53\"><span class=\"ln\">53   </span></a>  }   <a name=\"l54\"><span class=\"ln\">54   </span></a>   <a name=\"l55\"><span class=\"ln\">55   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">takeArea(): Int = {   <a name=\"l56\"><span class=\"ln\">56   </span></a>    AREA   <a name=\"l57\"><span class=\"ln\">57   </span></a>  }   <a name=\"l58\"><span class=\"ln\">58   </span></a>   <a name=\"l59\"><span class=\"ln\">59   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">setArea(inArea:Int): Unit = {   <a name=\"l60\"><span class=\"ln\">60   </span></a>    AREA = inArea   <a name=\"l61\"><span class=\"ln\">61   </span></a>  }   <a name=\"l62\"><span class=\"ln\">62   </span></a>   <a name=\"l63\"><span class=\"ln\">63   </span></a>  </span><span class=\"s5\">// Return all of Country information in a formatted string</span><span class=\"s1\">   <a name=\"l64\"><span class=\"ln\">64   </span></a>  </span><span class=\"s2\">def </span><span class=\"s1\">returnAllInfo(): String = {   <a name=\"l65\"><span class=\"ln\">65   </span></a>    </span><span class=\"s3\">&quot;%43s %10s %10s %5s %10s %5s&quot;</span><span class=\"s1\">.format(   <a name=\"l66\"><span class=\"ln\">66   </span></a>      NAME</span><span class=\"s6\">, </span><span class=\"s1\">EXPORTS</span><span class=\"s6\">, </span><span class=\"s1\">TRADE_BALANCE</span><span class=\"s6\">, </span><span class=\"s1\">YEAR</span><span class=\"s6\">, </span><span class=\"s1\">POPULATION</span><span class=\"s6\">, </span><span class=\"s1\">AREA)   <a name=\"l67\"><span class=\"ln\">67   </span></a>  }   <a name=\"l68\"><span class=\"ln\">68   </span></a>   <a name=\"l69\"><span class=\"ln\">69   </span></a>}   <a name=\"l70\"><span class=\"ln\">70   </span></a></span></pre> ", user_id: 2, image_thumbnail_url: "http://i.imgur.com/DSYyYRPb.jpg"},
  {title: "Artificial Intelligence: Can Computers Be Cognitive?", subtitle: "An inspection on John Searle's View of Artificial Intelligence", image_url: "http://i.imgur.com/pfQcjtH.jpg", date_posted: "2015-07-31", date_modified: "2016-03-11", post_body: "<p>In 1984 John Searle wrote <I>Minds, Brains, and Science</I>, in which he inspected the possibility of       cognitive machines. That is to say, computers capable of human like thought.  Many of the views discussed       in this book are still current in modern culture so this will be the bulk of what I discuss in this post.</p>            <p><strong>What is intentionality?</strong></p>      <p>Intentionality is what John Searle refers to as <i>“the second intractable feature of the mind… the feature       by which our mental states are directed at, or about. Intentionality … doesn’t just refer to intention, but       also to beliefs, desires, hopes … and all of those mental states (whether conscious or unconscious) that       refer to, or are about the world apart from the mind”</i> (Searle, p16). Two types of intentionality can be       distinguished from this description: intrinsic and derivative. Intrinsic intentionality is that of our       beliefs, perceptions, and intentions. Derivative intentionality is the way we interpret the things we       experience (words, movies, books…). Intentionality is extremely prevalent in the consciousness of human       beings and impacts every facet of human life. Consider the feeling of thirst, which is caused by a sequence       of events in the central nervous system and then results in the desire to drink (Searle, p24). In this       manner, biological processes stimulate a response of thirst directed towards water so that humans might       survive. Searle emphasizes this integration of intentionality, biology, and consciousness by stating that       <i>“visual and auditory experiences, tactile sensations, hunger, thirst, and sexual desire, are all caused by       brain processes and they… are all intentional phenomena”</i> (Searle, p 24).</p>            <p><strong>Searle's criticisms of strong AI and cognitive science based on intentionality:</strong></p>      <p>Searle refutes the views of strong AI and cognitive science. He states that the prevailing view in       philosophy, psychology, and artificial intelligence emphasizes the similarities between the human brain and       how digital computers operate. This view relates humans and strong AI on the comparison of the mind being to       the brain as computer programs are to computers. His criticism of these views are based on the concept of       intentionality. Mainly, that computers lack intentionality and always will. He refutes the claims of strong       AI on the basis that digital computers are syntactic in nature, that they can only follow the rules specified       by their syntactic structure. Computers execute programs based on a set of instructions, manipulating some       input to produce some output, the numbers and strings that make up the computers instructions are meaningless.       Thus <i>“one and the same program can be run on an indefinite range of different types of hardware”</i> and <i>“this       feature of programs, that they are defined purely formally or syntactically, is fatal to the view that mental       processes and program processes are identical”</i> (Seale, p 31). For this reason, computers lack intentionality;       their syntactic structure binds them to the rules of the syntax. If a computer was to have any sort of       intrinsic intentionality (which in Searle’s view is impossible), it would be specified by whatever       instructions it received, and would be nonexistent at the completion of the program, and thus lacking       intentionality by its very nature. The human mind has more than syntax, the thoughts of the mind have       “certain mental content” in addition to any formal features (syntax) and because of this, thoughts are       intrinsically semantic, or contain meaning. This feature of semantics defines thoughts as having meaning       regardless of how those thoughts occurred.</p>            <p>The distinction Searle makes between strong AI and cognitive science is that strong AI claims that       computers have thought, but that cognitive science does not have to prove this. Rather, cognitive science       is formed on the basis that thinking is the processing of information and thus studies the functions of       computers and the brain on the level of their functioning as information processors (Searle, p43). Consider       the notion that both computers and humans follow rules. Searle emphasizes that these processes are       fundamentally different for computers and humans. Humans follow rules because there is some intrinsic      meaning behind them which influences their behavior in relation to that rule, but it is important to       note that humans can break these rules. Computers, on the other hand follow rules in the form of formal       procedures and thus rule following for a computer is only a metaphor for that of what a human does. This       variance in rule following parallels the difference seen in information processing. When humans think it       involves mental states, which is to say, that thinking involves the processing of information and the meaning       behind that processing and the results produced. Computers on the other hand do not think in this sense.       Instead they mimic thinking by simulating the processes of formal features. Computers don’t know the       meaning behind the operations they perform and thus don’t think when executing their operations. Thus they       are following a set of rules or instructions to manipulate these symbols by some set of rules to produce a       result which mimics the human process of information processing (Searle, p 48). Therefore, even in cognitive       science, based on Searle’s description, computers lack intentionality because they follow a set of rules to       mimic the human characteristic of information processing they cannot have a unique intention directed on       their inputs or results.</p>            <p><strong>A digital computer with intrinsic intentionality; is this possible?</strong></p>      <p>I am inclined to think that it is possible for a digital computer to eventually have intrinsic       intentionality. If it is possible for beings of unknown origin to be cognitive and intentional such as       humans, why wouldn’t it be possible for computers have the potential for these characteristics also? I am       intrigued by the similarities between the structure of the central nervous system and the structure of       computers, mainly in the sense that both rely on electrical signals over some threshold to transmit meaningful       information. In digital computers, these signals are interpreted as numbers, the purpose in both the biological       model and the computer model is to transmit these signals to create some sort of change in environment, be it       the brain, or some piece of computer hardware. I would pose the argument that perhaps humans may also follow       some syntax as defined by our genome, or the laws of nature, but are unable to think outside of it because we       are bound by those laws and thus cannot identify the syntactic nature by which our minds operate. This might       happen with the use of computers which write their own instructions. At first, these instructions would be       easily recognizable, but as the computer expanded its instructions through experimentation and refinement,       who is to say that these instructions might one day transcend human understanding and thus be akin to the       hypothetical instructions by which human minds operate, in effect providing the basis for human like       intentionality in digital computers.</p>            <p><strong>Regardless of unforeseen technological progress in computing, will Searle's claims against strong AI hold?</strong></p>      <p>Searle claims that regardless of technological progress, strong AI will always be refuted. Searle gives       compelling examples to how computers are bound by the syntax of the programs they run and that the fact that       these programs can be run on many different computers differentiates them from the relationship of the human       mind and brain. I feel that this conclusion cannot be drawn outright. I am compelled to agree with the       foundation of the previous arguments but as observed in my thoughts on digital computers and intrinsic       intentionality, I don’t think it is wise to completely rule out the possibility of strong AI based on the       unknown trajectory of technology. As technology improves, computers improve, and the programs that operate       on computers improve. We already have computers running programs that write their own instructions, we       also have programming languages whose syntax is based on semantic analysis rather than the syntax itself,       meaning these programs are governed to “make decisions” based on the meaning of the information they process.       If a computer passes the Touring Test, and humans don’t understand the instructions that the computer is       executing in order to mimic the information processing and decision making processes of humans, how can       humans conclude that these computers do not have the foundations for consciousness as described by Searle?       I would argue that you cannot make that distinction for that which you don’t understand. Thus, Searle’s       argument holds true for the modern day computer but fails to address the possibility of self-generated       computing procedures which humans can no longer understand and thus his claims against strong AI are       ultimately incorrect.</p>            <p><strong>Works Cited</strong></p>      <p>Searle, John R. Minds, Brains, and Science. Cambridge, Mass.: Harvard UP, 1984. Print.</p> ", user_id: 2, image_thumbnail_url: "http://i.imgur.com/pfQcjtHb.jpg"},
  {title: "Dijkstra's Algorithm", subtitle: "Link-state algorithms", image_url: "http://i.imgur.com/S3njCof.jpg", date_posted: "2015-07-24", date_modified: "2016-03-11", post_body: "<p>A lot goes on behind the scenes in order to get the internet functioning properly and efficiently. When you interact with a webpage you are making a request to the server that the webpage is located on. In order for your request to be sent quickly,      an efficient path must be known by every router between your host computer and the destination in order to take the best path. Special algorithms known as “link-state algorithms” are used to calculate these best paths so that any given router knows      exactly where to send each message relative to the other routers to which they are connected.</p>    <p>Today we are going to consider Dijkstra’s Algorithm. Observe this small network illustrated below.</p>      <img src=\"https://lh3.googleusercontent.com/Lr5tMlDeY11U35-VW99ZROjDHdl4EcWbDBx9fINzT6Q=w944-h681-no\" width=\"486\" height=\"465\">      <p>In this diagram the nodes (routers) are represented by the blue ovals, and the links between the nodes (the edges) are represented by the green bars. Each node is labeled with “V” + {some number} and the distance between each node is labeled as a number      next to each link. Let’s say that we are interested in building a forwarding table specifically for router V1 so that V1 knows exactly which router to forward each message on. Thus every message will travel along the shortest path.      <p>        <p>Using the algorithms below, along with the information provided by the diagram, it is possible to build a forwarding table for each router in this network.</p>        <p>We will model nodes (routers) and edges (links) as abstract data types in the following manner:</p>          <pre>      /**       * Special data type to hold specific information regarding each node.       */      public class Node {          public final String name;          public final int id;          public ArrayList&lt;Edge&gt; edges = new ArrayList&lt;&gt;();   // Y'          public double minDistance = Double.POSITIVE_INFINITY;   // D(i)          public Node previous;   // p(i)            public Node(String nodeName, int nodeID) {              name = nodeName;              id = nodeID;          }      }        /**       * Special data type to hold specific information regarding each link.       */      public class Edge {          public final Node node;          public final double length;            public Edge(Node nodeIn, double lengthIn) {              node = nodeIn;              length = lengthIn;          }      }  </pre>          <p>This program implementation requires the user to know the number of nodes in the network, along with an available text file which contains the id number of two adjacent nodes followed by the link cost in the following format:</p>        <pre>&lt;node1&gt;\t&lt;node2&gt;\t&lt;linkCost&gt;</pre>        <p>Here is the .txt file used to run the program for the network illustrated in the previous diagram. </p>            <pre>  1\t2\t1  1\t3\t1  1\t5\t3  2\t4\t5  3\t6\t8  4\t5\t5  4\t6\t2 </pre>          <p>And the code used to scan through the file and build up each node in an array list.</p>          <pre>/**       * Display a prompt message to ask the user to input the total number of       * routers, n, in the network. Validate n to make sure that it is greater       * than or equal to 2.       */      private void promptForNodeN() {          do {              System.out.print(\"Input the total number \" +                      \"of routers in the network (must be > 1): \");              nRouters = Integer.parseInt(kb.nextLine());          } while (nRouters &lt; 2);          nodeCollection = new ArrayList&lt;&gt;(nRouters * 2);      }            /**       * Display a prompt message to ask the user to input the name of a txt file       * that contains costs of all links. Each line in this file provides the       * cost between a pair of routers as below, where tab (\\t) is used to       * separate the numbers in each line. This txt file can locate in the       * same directory where this program runs such that a path is not needed.       * Display a message saying that in which row the first       * invalid number is detected, close the txt file, and KEEP asking for       * the name of the cost input file until all numbers are checked to be       * valid.       */      private void promptForInputFile() {          boolean validFile;          do {              System.out.print(\"Input the name of a txt file \" +                      \"that contains costs of all links: \");              File inputDataFile = new File(kb.nextLine());              try {                  inputFile = new Scanner(inputDataFile);                  validFile = scanInputFile();              } catch (FileNotFoundException e) {                  System.out.println(\"Error reading input file.\");                  validFile = false;              }          } while (!validFile);      }            /**       * Validate values in input file such that the first and the second numbers       * in each row are between 1 and n, the third number needs to be validated       * to be positive. Record the cost information in the Cost matrix.       *       * @return true if file is valid       */      private boolean scanInputFile() {          String lineIn;          String[] tokens;          int[] numTokens;          int lineNumber = 1;          while (inputFile.hasNext()) {              lineIn = inputFile.nextLine();              tokens = lineIn.split(\"\\\\s+\");                // convert tokens to int to be checked for validity              numTokens = new int[]{                      Integer.parseInt(tokens[0]),                      Integer.parseInt(tokens[1]),                      Integer.parseInt(tokens[2])              };                // check tokens from input file for valid number ranges              if (((numTokens[0] &lt; 1) && (numTokens[0] &lt; nRouters)) ||                      ((numTokens[1] &lt; 1) && (numTokens[1] &lt; nRouters))) {                  System.out.println(\"Invalid router number at line \" +                          lineNumber + \".\");                  return false;              } else if (numTokens[2] &lt; 0) {                  System.out.println(\"Invalid link cost number at line \" +                          lineNumber + \".\");                  return false;              }                // add a new node to the collection if it doesn't already exist              Node primary = null;              Node secondary = null;              for (Node n : nodeCollection) {                  if (n.id == Integer.parseInt(tokens[0])) {                      primary = n;                  } else if (n.id == Integer.parseInt(tokens[1])) {                      secondary = n;                  }              }                if (primary == null) {                  primary = new Node(\"V\" + tokens[0],                          Integer.parseInt(tokens[0]));                  nodeCollection.add(primary);              }                if (secondary == null) {                  secondary = new Node(\"V\" + tokens[1],                          Integer.parseInt(tokens[1]));                  nodeCollection.add(secondary);              }                primary.edges.add(new Edge(secondary,                      Double.parseDouble(tokens[2])));                secondary.edges.add(new Edge(primary,                      Double.parseDouble(tokens[2])));                lineNumber++;          }          return true;      }</pre>          <p>This information will be used to build the forwarding table for our source router V1.</p>        <p>In <strong>Dijkstra’s Algorithm</strong> there are two phases:</p>        <ol>          <li>The initialization phase:            <ul>              <li>This is where we collect all nodes whose least cost path is known. We will call this set of nodes N’.</li>              <li>We must also keep track of the set of edges currently known to be the shortest path rooted at our source node (initially this collection of edges is null). We will call this set of edges Y’.</li>              <li>As we observe each node and link we must consider the link cost from the node we are on, to the node we are observing, if these two nodes are not adjacent, this cost will be infinity. These costs are tracked as the current path cost from source                node to node i, which is denoted as D(i). We will denote this link cost relationship as c(k, i) which reads: “the link cost between node k and i.” Additionally, we must make note of each predecessor node along the path from the source node                to node i (the node we are currently on). This predecessor node will be denoted as p(i) which reads as: “the predecessor on the path from the source node to node i” and will be recorded such that D(i) = c(k,i).</li>              <li>Finally we will add every node that is adjacent to the source node to our collection N’.</li>            </ul>          </li>          <li>The loop phase:            <ul>              <li>In each iteration of this phase we find the next node (k) that doesn’t currently exist in N’ such that it has the lowest link cost with the source node, and examine it to find the shortest cost to one of its adjacent nodes (i). Because we                are now observing k, we will add it to the collection N’ (to be used in a later iteration of this loop), and add a new edge (p(k), k) to the collection Y’.</li>              <li>From here we will update D(i) and p(i) for all nodes i that are adjacent to node k that do not currently exist in the collection N’ if and only if:                <ul>                  <li>The current path cost from source to k plus the cost from k to i is less than the current path cost from source to i. If this is the case, the new path cost D(i) becomes the path cost D(k) plus the cost form k to i, and the predecessor                    of i becomes k.</li>                </ul>              </li>            </ul>          </li>        </ol>        <p><strong>Reference Key:</strong></p>        <ul>          <li>N': set of nodes for which the least cost path has been found.</li>          <li>Y': set of edges for which the current shortest path has been calculated rooted at the source node (V1).</li>          <li>D(i): current known cost of path from source node V1 to destination node i.</li>          <li>p(i): predecessor node along the path from source V1 to node i.</li>          <li>c(m, n): the cost of the link from node m to n. If m and n are not adjacent, this value is considered to be infinity.</li>        </ul>          <p><strong>In pseudocode:</strong></p>        <pre>    Initialization:        N' = {V1}        Y' = null (set is empty)        for all nodes (i) in the network:          if i is adjacent to V1            then D(i) = c(V1, i), p(i) = V1          otherwise            D(i) = infinity                Loop Phase:        while all nodes in the network do not exist in N':          observe the nodes not in N' and find the node (k) with the minimum D(k)          add node k to the set N'          add edge (p(k), k) to the set Y'          for all adjacent nodes (j) to k and not in N':            if D(k) + c(k, j) &lt; D(j)              then D(j) = D(k) + c(k, j) and p(j) = k          </pre>          <p><strong>In Java:</strong></p>          <pre>      /**       * Implement the Dijkstra's algorithm to build up the shortest-path tree       * rooted at source router V1. As the intermediate results, at the end of       * Initialization and each iteration of the Loop, display       * The set N': this is stored in the Node.name value for each Node in       * nodeCollection.       * The set Y' : this is stored in Node.edges which is an array list of each       * edge associated with that node.       * D(i) for each i between 2 and n: stored as Node.minDistance       * p(i) for each i between 2 and n: Node.previous value for each Node in       * nodeCollection.       */      private void walkPaths() {          // get the source router (node)          Node n = nodeCollection.get(0);          n.previous = n;          n.minDistance = 0;            // create lists to store values for N' and Y'          ArrayList&lt;Node&gt; nPrime = new ArrayList&lt;&gt;();          ArrayList&lt;String&gt; yPrime = new ArrayList&lt;&gt;();            // new list of nodes to hold nodes that need to be processed          List&lt;Node&gt; nodeList = new ArrayList&lt;&gt;();          nodeList.add(n);            // continue executing while there are still nodes to run the algorithm          // on          while (!nodeList.isEmpty()) {              Node x = nodeList.get(0);                nodeList.remove(x);                if (!nPrime.contains(x)) {                  nPrime.add(x);              }                // continue processing while there are still unprocessed links on              // node x              while (x.edges.size() > 0) {                  Edge e = x.edges.get(0);                  Edge min = e;                    // find the smallest edge to process first                  for (Edge edge : x.edges) {                      if (edge.length &lt; e.length) {                          min = edge;                      }                  }                  x.edges.remove(min);                    Node next = min.node;                  if (!nPrime.contains(min.node)) {                      nPrime.add(min.node);                  }                  double length = min.length;                      // Dijkstra's Algorithm:                  // D(k) + c(k, i)                  double testLengthDistance = x.minDistance + length;                  // D(k) + c(k, i) &lt; D(i)                  if (testLengthDistance &lt; next.minDistance) {                      nodeList.remove(next);                      // D(i) = D(k) + c(k, i)                      next.minDistance = testLengthDistance;                      // p(i) = k                      next.previous = x;                      if (!yPrime.contains(\"(\" + x.name + \", \" + min.node.name + \")\")) {                          yPrime.add(\"(\" + x.name + \", \" + min.node.name + \")\");                      }                      nodeList.add(next);                  }              }          }      }      </pre>          <p>Simply executing this portion of code will alter all of our Node items so that they contain the correct data to derive a forwarding table for our source node V1. In order to do this we must implement another simple algorithm.</p>          <p><strong>Building the Forwarding Table:</strong></p>        <p>When building our forwarding table we need to take a look at each node in N' except our source node V1. To achieve this, observe the following pseudocode:</p>        <pre>        for each node(i) in N', while i isn't V1:          node j = i          while p(j) isn't V1:             j = p(j)          add table entry:            destination = i,            link = (u,j)        </pre>          <p><strong>In Java:</strong></p>        <pre>      private String[] forwardingTable() {          String[] links = new String[nRouters + 1];          // find adjacent node to source router with resulting shortest path to          // target node          for (Node i : nodeCollection) {              Node j = i;              while (j.previous != nodeCollection.get(0)) {                  j = j.previous;              }              links[i.id] = j.name;          }          return links;      }        </pre>          <p>All we are doing in the previous code is observing every node j, such that j is not V1 and then following each preceding node from j until we reach V1. The resulting forwarding table for V1 can then be derived:</p>        <table>          <tr>            <th>Destination</th>            <th>Link</th>          </tr>          <tr>            <td>V2</td>            <td>(V1, V2)</td>          </tr>          <tr>            <td>V3</td>            <td>(V1, V3)</td>          </tr>          <tr>            <td>V4</td>            <td>(V1, V5)</td>          </tr>          <tr>            <td>V5</td>            <td>(V1, V2)</td>          </tr>          <tr>            <td>V6</td>            <td>(V1, V2)</td>          </tr>        </table>          <p>These results may be rather uninteresting, but leveraging this type of algorithm enables all of our networking routers to direct our internet traffic to the appropriate place in an efficient manner is entirely, interesting.</p>    <p>Check out my <a href=\"https://github.com/KyleFrisbie/MSUDenver_Projects/tree/master/Networks/Project6_Dijkstra/src\"><font color=\"aqua\">full implementation as well as other implementations of Dijkstra's Algorithm here.</font></a>          <p><small>Content in the explanation of Dijkstra's algorithm and its pseudo code was derived from the teachings of Dr. Weing Zhu's Networking class, Metropolitan State University of Denver, Fall 2015.</small>          <br>          <small>Implementation of Dijkstra's Algorithm modeled after <a href=\"http://en.literateprograms.org/Dijkstra%27s_algorithm_(Java)\" ><font color=\"aqua\">LiteratePrograms</font></a> for more information please visit their site.</small></p>", user_id: 2, image_thumbnail_url: "http://i.imgur.com/S3njCofb.jpg"},
  {title: "Back Again, With A Vengeance", subtitle: "Long Overdue", image_url: "http://i.imgur.com/MoyDjTH.jpg", date_posted: "2015-06-06", date_modified: "2016-03-11", post_body: "<p>      To say the least, this post is long overdue. A lot has happened since my last update,      lets start with school. Last year in June, I decided to take my pursuit for software      engineering more seriously, so I began a new degree program in Computer Science at      Metropolitan State University of Denver. Its been a year, and I have learned a lot.      The MSU Denver program focuses a lot on the Java programming language, and most of the      work I have done at MSU has been with Java. I've also gained exposure to Clojure, Scala      and ARM Assembly language. Please check out my      <a href=\"https://github.com/KyleFrisbie/MSUDenver_Projects\"><FONT COLOR=\"aqua\">MSUDenver_Projects Repo</FONT></a>      on GitHub for related projects. I'm happy to say that I've gained a broad understanding      of both object-oriented, as well as functional programming languages, in addition to      computer language architecture and hardware software interaction.  </p>    <p>      I've also decided to make a more directed effort at completing projects to further my      personal development as a developer. For this summer season I have tasked myself with      updating my GitHub, redesigning my web page, and developing an Android application      for starters. So far the GitHub is updated, and the web page has been completely redesigned.      Check back soon to see what I'm doing with my Android application!  </p>", user_id: 2, image_thumbnail_url: "http://i.imgur.com/MoyDjTHb.jpg"},
  {title: "Two Steps Forward, One Step Back", subtitle: "The incredible journey of building my first application.", image_url: "http://i.imgur.com/hAhbfK2.jpg", date_posted: "2014-03-05", date_modified: "2016-03-11", post_body: "<p>Thirty eight days later, the basic framework of my website is up and running. Along the way there have been many frustrations and setbacks involving the development of this application, hence the \"Two Steps Forward, One Step Back\" title. I believe this frame of mind can be applied to most new things you are learning: learn tons of new information, feel awesome, go home to apply that information; stuff breaks. Repeat.</p>    <p>My project began by following a course series which included the instructions for building an application in ASP.NET MVC4. After a few weeks I had a fully functional website complete with blog posting capabilities, comment features, and user accounts.  At this point I had gained a fundamental understanding of Models, Views, and Controllers and how they all interact. The first design was good, but not great. Gentry advised that I scrap my primary design and start again, this time using a more advanced structure. What you are viewing is website 2.0.</p>    <p>Now that the site is up an running, I look forward to the continued documentation of my developer's journey. Constant updates and improvements will be applied to this application as I continue to learn. I'm excited to bring these new features to the website as a way to reinforce the new things I am learning.</p>    <p>With no prior knowledge of C#, Java Script, or the IDE environment of Visual Studio 2013, this experience has been a crash course. Among other things, I've learned how to: write functioning C# and Java Script code, integrate NewGet packages and libraries into my application, communicate with the server to store my information, and successfully publish my website using Windows Azure.</p>    <h3>Looking Forward</h3>  <p> While the development of this site will be ongoing, it has provided a good launch point to start my next project, development of an <b>Android application</b>. Check back to see what I'm up to and feel free to leave a comment with insight, suggestions, or questions you might have. Thanks for your support, I'm excited to see what's next!</p> ", user_id: 2, image_thumbnail_url: "http://i.imgur.com/hAhbfK2b.jpg"}
])
Post::HABTM_Tags.create!([
  {post_id: 1, tag_id: 1},
  {post_id: 2, tag_id: 1},
  {post_id: 4, tag_id: 1},
  {post_id: 5, tag_id: 1},
  {post_id: 3, tag_id: 1},
  {post_id: 6, tag_id: 1},
  {post_id: 7, tag_id: 1},
  {post_id: 8, tag_id: 1},
  {post_id: 9, tag_id: 1}
])
PostsTags.create!([
  {post_id: 1, tag_id: 1},
  {post_id: 2, tag_id: 1},
  {post_id: 4, tag_id: 1},
  {post_id: 5, tag_id: 1},
  {post_id: 3, tag_id: 1},
  {post_id: 6, tag_id: 1},
  {post_id: 7, tag_id: 1},
  {post_id: 8, tag_id: 1},
  {post_id: 9, tag_id: 1}
])
Tag.create!([
  {name: "post"},
  {name: "project"}
])
Tag::HABTM_Posts.create!([
  {post_id: 1, tag_id: 1},
  {post_id: 2, tag_id: 1},
  {post_id: 4, tag_id: 1},
  {post_id: 5, tag_id: 1},
  {post_id: 3, tag_id: 1},
  {post_id: 6, tag_id: 1},
  {post_id: 7, tag_id: 1},
  {post_id: 8, tag_id: 1},
  {post_id: 9, tag_id: 1}
])
